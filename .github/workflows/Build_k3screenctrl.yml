# This is a basic workflow to help you get started with Actions

name: Build K3 Screenctrl

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
      
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          #docker rmi `docker images -q`
          #echo "Deleting files, please wait ..."
          #sudo rm -rf \
          #  /usr/share/dotnet \
          #  /etc/mysql \
          #  /etc/php
          #sudo -E apt-get -y purge \
          #  azure-cli \
          #  ghc* \
          #  zulu* \
          #  hhvm \
          #  llvm* \
          #  firefox \
          #  google* \
          #  dotnet* \
          #  powershell \
          #  openjdk* \
          #  mysql* \
          #  php*
          #sudo -E apt-get update
          #sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
          #sudo -E apt-get -y autoremove --purge
          #sudo -E apt-get clean
          docker rmi docker images -q
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          
      - name: Clone source code
        env: 
          REPO_URL: https://github.com/coolsnowwolf/lede
          REPO_BRANCH: master
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          
      - name: Customization
        working-directory: ./openwrt
        run: |
          rm -rf package/lean/k3screenctrl
          
      - name: Import external feeds
        working-directory: ./openwrt
        run: |
          git clone https://github.com/Hill-98/openwrt-k3screenctrl.git package/lean/k3screenctrl
          git clone https://github.com/Hill-98/luci-app-k3screenctrl.git package/lean/luci-app-k3screenctrl
      
      - name: Update & Install feeds
        working-directory: ./openwrt
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: Generate configuration file
        working-directory: ./openwrt
        run: |
          rm -f ./.config*
          touch ./.config
          
          # 编译PhcommK3固件:
          cat >> .config <<EOF
          CONFIG_TARGET_bcm53xx=y
          CONFIG_TARGET_bcm53xx_generic=y
          CONFIG_TARGET_bcm53xx_generic_DEVICE_phicomm_k3=y
          CONFIG_TARGET_BOARD="bcm53xx"
          CONFIG_TARGET_SUBTARGET="generic"
          CONFIG_TARGET_PROFILE="DEVICE_phicomm_k3"
          CONFIG_TARGET_ARCH_PACKAGES="arm_cortex-a9"
          CONFIG_DEFAULT_TARGET_OPTIMIZATION="-Os -pipe"
          CONFIG_CPU_TYPE="cortex-a9"
          EOF
          # 固件压缩, 编译ext4格式固件
          # 注意如果选的插件数目多，CONFIG_TARGET_ROOTFS_PARTSIZE要设置大一些
          cat >> .config <<EOF
          CONFIG_EXTERNAL_CPIO=""
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_SQUASHFS_BLOCK_SIZE=1024
          CONFIG_TARGET_UBIFS_FREE_SPACE_FIXUP=y
          CONFIG_TARGET_UBIFS_JOURNAL_SIZE=""
          EOF
          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF
          # IPv6支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          # CONFIG_PACKAGE_ipv6helper=y
          # EOF
          # 多文件系统支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-common=y
          CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          EOF
          # USB3.0支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          EOF
          # 常用LuCI插件选择, 主要定制passwall与ssr-plus
          cat >> .config <<EOF
          CONFIG_PACKAGE_k3screenctrl=y
          CONFIG_PACKAGE_luci-app-k3screenctrl=y
          EOF
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          # cat >> .config <<EOF
          # # CONFIG_TARGET_IMAGES_PAD is not set
          # # CONFIG_VMDK_IMAGES is not set
          # EOF
          # 
          # ========================固件定制部分结束========================
          # 
          sed -i 's/^[ \\t]*//g' ./.config
          make defconfig
      
      #- name: Configuration - Build K3 Screenctrl
      #  env:
      #    CONFIG_FILE: 'Phicomm_K3_Auto.config'
      #  run: |
      #    [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
      #    cd openwrt && make defconfig
      
      - name: Download package
        working-directory: ./openwrt
        run: |
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: Build
        working-directory: ./openwrt
        run: |
          echo -e "$(nproc) thread build."
          #make -j$(nproc) V=s
          make package/lean/k3screenctrl/compile V=99
          make package/lean/luci-app-k3screenctrl/compile V=99
        
      - name : Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: k3screenctrl
          path: openwrt/bin
